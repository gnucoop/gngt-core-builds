/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { ofType } from '@ngrx/effects';
import { createFeatureSelector, createSelector, select } from '@ngrx/store';
import { pipe, throwError } from 'rxjs';
import { filter, map, switchMap, take, tap } from 'rxjs/operators';
import { createAction } from './utils';
export class ModelService {
    constructor(_store, _actions, _actionTypes, statePrefixes) {
        this._store = _store;
        this._actions = _actions;
        this._actionTypes = _actionTypes;
        const packageState = createFeatureSelector(statePrefixes[0]);
        this._modelState = createSelector(packageState, s => s[statePrefixes[1]]);
        this._lastGetEntry = pipe(select(createSelector(this._modelState, (state) => state.get)), filter(g => g.length > 0), map(g => g[0]));
        this._lastListEntry = pipe(select(createSelector(this._modelState, (state) => state.list)), filter(g => g.length > 0), map(g => g[0]));
        this._lastCreateEntry = pipe(select(createSelector(this._modelState, (state) => state.create)), filter(g => g.length > 0), map(g => g[0]));
        this._lastPatchEntry = pipe(select(createSelector(this._modelState, (state) => state.patch)), filter(g => g.length > 0), map(g => g[0]));
        this._lastUpdateEntry = pipe(select(createSelector(this._modelState, (state) => state.update)), filter(g => g.length > 0), map(g => g[0]));
        this._lastDeleteEntry = pipe(select(createSelector(this._modelState, (state) => state.delete)), filter(g => g.length > 0), map(g => g[0]));
        this._lastDeleteAllEntry = pipe(select(createSelector(this._modelState, (state) => state.deleteAll)), filter(g => g.length > 0), map(g => g[0]));
        this._lastQueryEntry = pipe(select(createSelector(this._modelState, (state) => state.query)), filter(g => g.length > 0), map(g => g[0]));
    }
    getGetLoading() {
        return this._store.pipe(this._lastGetEntry, map(g => g.loading));
    }
    getGetOptions() {
        return this._store.pipe(this._lastGetEntry, map(g => g.options));
    }
    getGetId() {
        return this._store.pipe(this._lastGetEntry, map(g => g.id));
    }
    getGetObject() {
        return this._store.pipe(this._lastGetEntry, map(g => g.object));
    }
    getGetError() {
        return this._store.pipe(this._lastGetEntry, map(g => g.error));
    }
    getListLoading() {
        return this._store.pipe(this._lastListEntry, map(g => g.loading));
    }
    getListOptions() {
        return this._store.pipe(this._lastListEntry, map(g => g.options));
    }
    getListObjects() {
        return this._store.pipe(this._lastListEntry, map(g => g.objects));
    }
    getListError() {
        return this._store.pipe(this._lastListEntry, map(g => g.error));
    }
    getListHasNext() {
        return this._store.pipe(this._lastListEntry, map(g => g.objects != null && g.objects.next != null));
    }
    getListCurrentStart() {
        return this._store.pipe(this._lastListEntry, filter(g => g.options != null), map(g => g.options.start != null ? g.options.start : 1));
    }
    getCreateLoading() {
        return this._store.pipe(this._lastCreateEntry, map(g => g.loading));
    }
    getCreateObject() {
        return this._store.pipe(this._lastCreateEntry, map(g => g.object));
    }
    getCreateError() {
        return this._store.pipe(this._lastCreateEntry, map(g => g.error));
    }
    getUpdateLoading() {
        return this._store.pipe(this._lastUpdateEntry, map(g => g.loading));
    }
    getUpdateId() {
        return this._store.pipe(this._lastUpdateEntry, map(g => g.id));
    }
    getUpdateObject() {
        return this._store.pipe(this._lastUpdateEntry, map(g => g.object));
    }
    getUpdateError() {
        return this._store.pipe(this._lastUpdateEntry, map(g => g.error));
    }
    getPatchLoading() {
        return this._store.pipe(this._lastPatchEntry, map(g => g.loading));
    }
    getPatchId() {
        return this._store.pipe(this._lastPatchEntry, map(g => g.id));
    }
    getPatchObject() {
        return this._store.pipe(this._lastPatchEntry, map(g => g.object));
    }
    getPatchError() {
        return this._store.pipe(this._lastPatchEntry, map(g => g.error));
    }
    getDeleteLoading() {
        return this._store.pipe(this._lastDeleteEntry, map(g => g.loading));
    }
    getDeleteId() {
        return this._store.pipe(this._lastDeleteEntry, map(g => g.id));
    }
    getDeleteObject() {
        return this._store.pipe(this._lastDeleteEntry, map(g => g.object));
    }
    getDeleteError() {
        return this._store.pipe(this._lastDeleteEntry, map(g => g.error));
    }
    getDeleteAllLoading() {
        return this._store.pipe(this._lastDeleteAllEntry, map(g => g.loading));
    }
    getDeleteAllIds() {
        return this._store.pipe(this._lastDeleteAllEntry, map(g => g.ids));
    }
    getDeleteAllObjects() {
        return this._store.pipe(this._lastDeleteAllEntry, map(g => g.objects));
    }
    getDeleteAllError() {
        return this._store.pipe(this._lastDeleteAllEntry, map(g => g.error));
    }
    getQueryLoading() {
        return this._store.pipe(this._lastQueryEntry, map(g => g.loading));
    }
    getQueryOptions() {
        return this._store.pipe(this._lastQueryEntry, map(g => g.options));
    }
    getQueryObjects() {
        return this._store.pipe(this._lastQueryEntry, map(g => g.objects));
    }
    getQueryError() {
        return this._store.pipe(this._lastQueryEntry, map(g => g.error));
    }
    getQueryHasNext() {
        return this._store.pipe(this._lastQueryEntry, map(g => g.objects != null && g.objects.next != null));
    }
    getQueryCurrentStart() {
        return this._store.pipe(this._lastQueryEntry, filter(g => g.options != null), map(g => g.options.start != null ? g.options.start : 1));
    }
    getCreateSuccess() {
        return this._actions.pipe(ofType(this._actionTypes.CREATE_SUCCESS));
    }
    getUpdateSuccess() {
        return this._actions.pipe(ofType(this._actionTypes.UPDATE_SUCCESS));
    }
    getPatchSuccess() {
        return this._actions.pipe(ofType(this._actionTypes.PATCH_SUCCESS));
    }
    getDeleteSuccess() {
        return this._actions.pipe(ofType(this._actionTypes.DELETE_SUCCESS));
    }
    getDeleteAllSuccess() {
        return this._actions.pipe(ofType(this._actionTypes.DELETE_ALL_SUCCESS));
    }
    get(id) {
        const action = createAction({ type: this._actionTypes.GET, payload: { id } });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.GET_SUCCESS, this._actionTypes.GET_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.get)(s)), map(gets => gets.find(g => g.uuid === action.uuid)), filter(get => get != null), tap(get => {
            if (get.error != null) {
                throwError(get.error);
            }
        }), filter(get => get.object != null), map(get => get.object), take(1));
    }
    list(options) {
        const action = createAction({ type: this._actionTypes.LIST, payload: { params: options || {} } });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.LIST_SUCCESS, this._actionTypes.LIST_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.list)(s)), map(lists => lists.find(l => l.uuid === action.uuid)), filter(list => list != null), tap(list => {
            if (list.error != null) {
                throwError(list.error);
            }
        }), filter(list => list.objects != null), map(list => list.objects), take(1));
    }
    create(data) {
        const action = createAction({
            type: this._actionTypes.CREATE,
            payload: { item: data },
        });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.CREATE_SUCCESS, this._actionTypes.CREATE_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.create)(s)), map(creates => creates.find(c => c.uuid === action.uuid)), filter(creates => creates != null), tap(create => {
            if (create.error != null) {
                throwError(create.error);
            }
        }), filter(create => create.object != null), map(create => create.object), take(1));
    }
    update(data) {
        const action = createAction({
            type: this._actionTypes.UPDATE,
            payload: { item: data },
        });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.UPDATE_SUCCESS, this._actionTypes.UPDATE_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.update)(s)), map(updates => updates.find(u => u.uuid === action.uuid)), filter(updates => updates != null), tap(update => {
            if (update.error != null) {
                throwError(update.error);
            }
        }), filter(update => update.object != null), map(update => update.object), take(1));
    }
    patch(data) {
        const action = createAction({ type: this._actionTypes.PATCH, payload: { item: data } });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.PATCH_SUCCESS, this._actionTypes.PATCH_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.patch)(s)), map(patches => patches.find(p => p.uuid === action.uuid)), filter(patches => patches != null), tap(patch => {
            if (patch.error != null) {
                throwError(patch.error);
            }
        }), filter(patch => patch.object != null), map(patch => patch.object), take(1));
    }
    delete(data) {
        const action = createAction({ type: this._actionTypes.DELETE, payload: { item: data } });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.DELETE_SUCCESS, this._actionTypes.DELETE_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.delete)(s)), map(dels => dels.find(d => d.uuid === action.uuid)), filter(dels => dels != null), tap(del => {
            if (del.error != null) {
                throwError(del.error);
            }
        }), filter(del => del.object != null), map(del => del.object), take(1));
    }
    deleteAll(data) {
        const action = createAction({ type: this._actionTypes.DELETE_ALL, payload: { items: data } });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.DELETE_ALL_SUCCESS, this._actionTypes.DELETE_ALL_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.deleteAll)(s)), map(deleteAlls => deleteAlls.find(d => d.uuid === action.uuid)), filter(deleteAlls => deleteAlls != null), tap(deleteAll => {
            if (deleteAll.error != null) {
                throwError(deleteAll.error);
            }
        }), filter(deleteAll => deleteAll.objects != null), map(deleteAll => deleteAll.objects), take(1));
    }
    query(options) {
        const action = createAction({ type: this._actionTypes.QUERY, payload: { params: options || {} } });
        this._store.dispatch(action);
        const actResult = this._actions.pipe(ofType(this._actionTypes.QUERY_SUCCESS, this._actionTypes.QUERY_FAILURE), filter(a => a.uuid === action.uuid));
        return actResult.pipe(switchMap(() => this._store), select(s => createSelector(this._modelState, (state) => state.query)(s)), map(queries => queries.find(q => q.uuid === action.uuid)), filter(queries => queries != null), tap(query => {
            if (query.error != null) {
                throwError(query.error);
            }
        }), filter(query => query.objects != null), map(query => query.objects), take(1));
    }
}
//# sourceMappingURL=data:application/json;base64,