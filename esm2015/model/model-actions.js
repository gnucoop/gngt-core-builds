/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { type } from '@gngt/core/reducers';
export function generateModelActionTypes(typeName) {
    return {
        LIST: type(`[${typeName}] List`),
        LIST_FAILURE: type(`[${typeName}] List failure`),
        LIST_SUCCESS: type(`[${typeName}] List success`),
        GET: type(`[${typeName}] Get`),
        GET_FAILURE: type(`[${typeName}] Get failure`),
        GET_SUCCESS: type(`[${typeName}] Get success`),
        CREATE: type(`[${typeName}] Create`),
        CREATE_FAILURE: type(`[${typeName}] Create failure`),
        CREATE_SUCCESS: type(`[${typeName}] Create success`),
        UPDATE: type(`[${typeName}] Update`),
        UPDATE_FAILURE: type(`[${typeName}] Update failure`),
        UPDATE_SUCCESS: type(`[${typeName}] Update success`),
        PATCH: type(`[${typeName}] Patch`),
        PATCH_FAILURE: type(`[${typeName}] Patch failure`),
        PATCH_SUCCESS: type(`[${typeName}] Patch success`),
        DELETE: type(`[${typeName}] Delete`),
        DELETE_FAILURE: type(`[${typeName}] Delete failure`),
        DELETE_SUCCESS: type(`[${typeName}] Delete success`),
        DELETE_ALL: type(`[${typeName}] Delete all`),
        DELETE_ALL_FAILURE: type(`[${typeName}] Delete all failure`),
        DELETE_ALL_SUCCESS: type(`[${typeName}] Delete all success`),
        QUERY: type(`[${typeName}] Query`),
        QUERY_FAILURE: type(`[${typeName}] Query failure`),
        QUERY_SUCCESS: type(`[${typeName}] Query success`),
    };
}
export class ModelBaseAction {
    constructor(payload) {
        this.payload = payload;
    }
}
export class ModelGetAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelGetSuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelGetFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelListAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelListSuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelListFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelCreateAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelCreateSuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelCreateFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelUpdateAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelUpdateSuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelUpdateFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelPatchAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelPatchSuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelPatchFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelDeleteAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelDeleteSuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelDeleteFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelDeleteAllAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelDeleteAllSuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelDeleteAllFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelQueryAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelQuerySuccessAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
export class ModelQueryFailureAction extends ModelBaseAction {
    constructor(payload) {
        super(payload);
        this.payload = payload;
    }
}
//# sourceMappingURL=data:application/json;base64,