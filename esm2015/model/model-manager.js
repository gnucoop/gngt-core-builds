/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { HttpClient } from '@angular/common/http';
import { Optional } from '@angular/core';
import { ModelManager as BaseModelManager } from '@gngt/core/common';
import { SyncService } from '@gngt/core/sync';
export class ModelManager extends BaseModelManager {
    constructor(config, endPoint, _http, syncService) {
        super();
        this._http = _http;
        this._useTrailingSlash = false;
        this._endPoint = endPoint;
        this._baseUrl = `${config.baseApiUrl}${this._endPoint}`;
        this._useTrailingSlash = config.addTrailingSlash != null ? config.addTrailingSlash : false;
        if (syncService != null && config.syncModel) {
            if (config.tableName == null) {
                throw new Error(`Table name must be set for model ${this._endPoint}`);
            }
            syncService.registerSyncModel(this._baseUrl, config.tableName);
        }
    }
    get baseUrl() {
        return this._baseUrl;
    }
    get(id) {
        return this._http.get(this._getObjectUrl(id));
    }
    list(options) {
        const params = this._listParamsToQueryParameters(options);
        return this._http.get(`${this._getListUrl()}${params}`);
    }
    create(data) {
        return this._http.post(this._getListUrl(), data);
    }
    update(id, data) {
        return this._http.put(this._getObjectUrl(id), data);
    }
    patch(id, data) {
        return this._http.patch(this._getObjectUrl(id), data);
    }
    delete(id) {
        return this._http.delete(this._getObjectUrl(id));
    }
    deleteAll(ids) {
        let url = `${this._baseUrl}/delete_all`;
        if (this._useTrailingSlash) {
            url = `${url}/`;
        }
        return this._http.post(url, { ids });
    }
    query(params) {
        let url = `${this._baseUrl}/query`;
        if (this._useTrailingSlash) {
            url = `${url}/`;
        }
        return this._http.post(url, params);
    }
    _getObjectUrl(id) {
        let url = `${this._baseUrl}/${id}`;
        if (this._useTrailingSlash) {
            url = `${url}/`;
        }
        return url;
    }
    _getListUrl() {
        let url = this._baseUrl;
        if (this._useTrailingSlash) {
            url = `${url}/`;
        }
        return url;
    }
    _listParamsToQueryParameters(options) {
        let params = '';
        const paramsArray = [];
        if (options) {
            if (options.limit) {
                paramsArray.push(`limit=${options.limit}`);
            }
            if (options.start) {
                paramsArray.push(`start=${options.start}`);
            }
            if (options.sort) {
                const props = Object.keys(options.sort);
                paramsArray.push(`sort=${props.map(p => `${p}:${options.sort[p]}`).join(',')}`);
            }
            if (options.fields) {
                paramsArray.push(`fields=${options.fields.join(',')}`);
            }
            if (options.joins) {
                paramsArray.push(`joins=${options.joins
                    .map(j => {
                    const join = `${j.model}.${j.property}`;
                    if (j.fields) {
                        return `${join}.${j.fields.join(';')}`;
                    }
                    return join;
                })
                    .join(',')}`);
            }
            if (paramsArray.length > 0) {
                params = `?${paramsArray.join('&')}`;
            }
        }
        return params;
    }
}
ModelManager.ctorParameters = () => [
    { type: undefined },
    { type: String },
    { type: HttpClient },
    { type: SyncService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,