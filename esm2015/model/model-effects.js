/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { createEffect, ofType } from '@ngrx/effects';
import { of as obsOf } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import { createAction } from './utils';
export class ModelEffects {
    constructor(_actions, _service, _manager, _actionTypes) {
        this._actions = _actions;
        this._service = _service;
        this._manager = _manager;
        this._actionTypes = _actionTypes;
        this.modelGet$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.GET), mergeMap(action => this._manager.get(action.payload.id)
            .pipe(map((item) => createAction({
            type: this._actionTypes.GET_SUCCESS,
            payload: { item },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.GET_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
        this.modelList$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.LIST), mergeMap(action => this._manager.list(action.payload.params)
            .pipe(map((result) => createAction({
            type: this._actionTypes.LIST_SUCCESS,
            payload: { result },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.LIST_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
        this.modelCreate$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.CREATE), mergeMap(action => this._manager.create(action.payload.item)
            .pipe(map((item) => createAction({
            type: this._actionTypes.CREATE_SUCCESS,
            payload: { item },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.CREATE_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
        this.modelUpdate$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.UPDATE), mergeMap(action => this._manager.update(action.payload.item.id, action.payload.item)
            .pipe(map((item) => createAction({
            type: this._actionTypes.UPDATE_SUCCESS,
            payload: { item },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.CREATE_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
        this.modelPatch$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.PATCH), mergeMap(action => this._manager.patch(action.payload.item.id, action.payload.item)
            .pipe(map((item) => createAction({
            type: this._actionTypes.PATCH_SUCCESS,
            payload: { item },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.PATCH_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
        this.modelDelete$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.DELETE), mergeMap(action => this._manager.delete(action.payload.item.id)
            .pipe(map(() => createAction({
            type: this._actionTypes.DELETE_SUCCESS,
            payload: { item: action.payload.item },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.DELETE_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
        this.modelDeleteAll$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.DELETE_ALL), mergeMap(action => this._manager.deleteAll(action.payload.items.map(i => i.id))
            .pipe(map(() => createAction({
            type: this._actionTypes.DELETE_ALL_SUCCESS,
            payload: { items: action.payload.items },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.DELETE_ALL_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
        this.modelQuery$ = createEffect(() => this._actions.pipe(ofType(this._actionTypes.QUERY), mergeMap(action => this._manager.query(action.payload.params)
            .pipe(map((result) => createAction({
            type: this._actionTypes.QUERY_SUCCESS,
            payload: { result },
            uuid: action.uuid
        })), catchError(error => obsOf(createAction({
            type: this._actionTypes.QUERY_FAILURE,
            payload: { message: error.message, stack: error.stack },
            uuid: action.uuid
        })))))));
    }
}
//# sourceMappingURL=data:application/json;base64,