/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { ChangeDetectorRef, Directive, EventEmitter, Input } from '@angular/core';
import { of as obsOf, Subscription } from 'rxjs';
import { filter, map, switchMap, take } from 'rxjs/operators';
import { AdminUserInteractionsService } from './admin-user-interactions';
export class AdminListComponent {
    constructor(_cdr, _aui) {
        this._cdr = _cdr;
        this._aui = _aui;
        this._headers = [];
        this._displayedColumns = [];
        this._baseEditUrl = '';
        this._newItemPath = 'new';
        this._actionProcessed = new EventEmitter();
        this.actionProcessed = this._actionProcessed;
        this._deletionEvt = new EventEmitter();
        this._deletionSub = Subscription.EMPTY;
    }
    get title() {
        return this._title;
    }
    set title(title) {
        this._title = title;
        this._cdr.markForCheck();
    }
    get headers() {
        return this._headers;
    }
    set headers(headers) {
        this._headers = headers;
        this._cdr.markForCheck();
    }
    get displayedColumns() {
        return this._displayedColumns;
    }
    set displayedColumns(displayedColumns) {
        this._displayedColumns = ['select', ...displayedColumns];
        this._cdr.markForCheck();
    }
    get baseEditUrl() {
        return this._baseEditUrl;
    }
    set baseEditUrl(baseEditUrl) {
        this._baseEditUrl = baseEditUrl;
        this._cdr.markForCheck();
    }
    get newItemPath() {
        return this._newItemPath;
    }
    set newItemPath(newItemPath) {
        this._newItemPath = newItemPath;
        this._cdr.markForCheck();
    }
    set service(service) {
        this._service = service;
        this._initService();
    }
    isAllSelected() {
        const numSelected = this.getSelection().length;
        const numRows = this.getItems().length;
        return numSelected === numRows;
    }
    masterToggle() {
        this.isAllSelected() ? this.clearSelection() : this.selectAll();
    }
    ngOnDestroy() {
        this._deletionSub.unsubscribe();
        this._deletionEvt.complete();
    }
    processAction(action) {
        const selected = this.getSelection();
        if (!selected || selected.length === 0) {
            return;
        }
        const handlerName = this._getActionHandler(action);
        const handler = this[handlerName];
        if (handler != null) {
            handler.call(this, selected);
        }
    }
    processDeleteAction(selected) {
        if (this._service == null) {
            return;
        }
        const s = this._aui.askDeleteConfirm().subscribe(res => {
            if (s) {
                s.unsubscribe();
            }
            if (res) {
                if (selected.length === 1) {
                    this._service.delete(selected[0]);
                }
                else {
                    this._service.deleteAll(selected);
                }
                this._actionProcessed.emit('delete');
                this.clearSelection();
            }
        });
    }
    _getService() {
        return this._service;
    }
    _getActionHandler(action) {
        action = action.charAt(0).toUpperCase() + action.substring(1);
        return `process${action}Action`;
    }
    _initService() {
        this._deletionSub.unsubscribe();
        this._deletionSub = this._deletionEvt
            .pipe(switchMap(selected => this._aui.askDeleteConfirm().pipe(map(res => ({ res, selected })))), switchMap(r => {
            const { res, selected } = r;
            if (res) {
                if (selected.length === 1) {
                    return this._service.delete(selected[0]);
                }
                return this._service.deleteAll(selected);
            }
            return obsOf(null);
        }), filter(r => r != null), take(1))
            .subscribe(() => {
            this._actionProcessed.emit('delete');
            this.clearSelection();
            this.refreshList();
        });
    }
}
AdminListComponent.decorators = [
    { type: Directive }
];
AdminListComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: AdminUserInteractionsService }
];
AdminListComponent.propDecorators = {
    title: [{ type: Input }],
    headers: [{ type: Input }],
    displayedColumns: [{ type: Input }],
    baseEditUrl: [{ type: Input }],
    newItemPath: [{ type: Input }],
    service: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,