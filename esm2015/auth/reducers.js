/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { createFeatureSelector, createSelector } from '@ngrx/store';
import * as fromAuth from './auth-reducer';
import * as fromLoginPage from './login-page-reducer';
export const reducers = {
    status: fromAuth.reducer,
    loginPage: fromLoginPage.reducer,
};
export const selectAuthState = createFeatureSelector('auth');
const ɵ0 = (state) => state.status;
export const selectAuthStatusState = createSelector(selectAuthState, ɵ0);
export const getInit = createSelector(selectAuthStatusState, fromAuth.getInit);
export const getUser = createSelector(selectAuthStatusState, fromAuth.getUser);
const ɵ1 = user => user != null;
export const getLoggedIn = createSelector(getUser, ɵ1);
const ɵ2 = (state) => state.loginPage;
export const selectLoginPageState = createSelector(selectAuthState, ɵ2);
export const getLoginPageError = createSelector(selectLoginPageState, fromLoginPage.getError);
export const getLoginPagePending = createSelector(selectLoginPageState, fromLoginPage.getPending);
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS9hdXRoL3JlZHVjZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBR0gsT0FBTyxFQUVMLHFCQUFxQixFQUNyQixjQUFjLEVBRWYsTUFBTSxhQUFhLENBQUM7QUFHckIsT0FBTyxLQUFLLFFBQVEsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEtBQUssYUFBYSxNQUFNLHNCQUFzQixDQUFDO0FBWXRELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBcUQ7SUFDeEUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxPQUFPO0lBQ3hCLFNBQVMsRUFBRSxhQUFhLENBQUMsT0FBTztDQUNqQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUN4QixxQkFBcUIsQ0FBbUIsTUFBTSxDQUFDLENBQUM7V0FHaEIsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTTtBQUR0RSxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FDOUIsY0FBYyxDQUFDLGVBQWUsS0FBcUMsQ0FBQztBQUN4RSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQ2hCLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUNoQixjQUFjLENBQUMscUJBQXFCLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1dBRWhDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUk7QUFEaEQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUNwQixjQUFjLENBQUMsT0FBTyxLQUF1QixDQUFDO1dBR2QsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUztBQUR6RSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FDN0IsY0FBYyxDQUFDLGVBQWUsS0FBd0MsQ0FBQztBQUMzRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FDMUIsY0FBYyxDQUFDLG9CQUFvQixFQUFFLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqRSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FDNUIsY0FBYyxDQUFDLG9CQUFvQixFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEdudWNvb3AgQW5ndWxhciBUb29sa2l0IChnbmd0KS5cbiAqXG4gKiBHbnVjb29wIEFuZ3VsYXIgVG9vbGtpdCAoZ25ndCkgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEdudWNvb3AgQW5ndWxhciBUb29sa2l0IChnbmd0KSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggR251Y29vcCBBbmd1bGFyIFRvb2xraXQgKGduZ3QpLiAgSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0ICogYXMgZnJvbVJvb3QgZnJvbSAnQGduZ3QvY29yZS9yZWR1Y2Vycyc7XG5pbXBvcnQge1xuICBBY3Rpb25SZWR1Y2VyTWFwLFxuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBNZW1vaXplZFNlbGVjdG9yXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuaW1wb3J0IHtBdXRoQXBpQWN0aW9uc1VuaW9ufSBmcm9tICcuL2F1dGgtYXBpLWFjdGlvbnMnO1xuaW1wb3J0ICogYXMgZnJvbUF1dGggZnJvbSAnLi9hdXRoLXJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUxvZ2luUGFnZSBmcm9tICcuL2xvZ2luLXBhZ2UtcmVkdWNlcic7XG5pbXBvcnQge1VzZXJ9IGZyb20gJy4vdXNlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aFN0YXRlIHtcbiAgc3RhdHVzOiBmcm9tQXV0aC5TdGF0ZTtcbiAgbG9naW5QYWdlOiBmcm9tTG9naW5QYWdlLlN0YXRlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIGV4dGVuZHMgZnJvbVJvb3QuU3RhdGUge1xuICBhdXRoOiBBdXRoU3RhdGU7XG59XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyczogQWN0aW9uUmVkdWNlck1hcDxBdXRoU3RhdGUsIEF1dGhBcGlBY3Rpb25zVW5pb24+ID0ge1xuICBzdGF0dXM6IGZyb21BdXRoLnJlZHVjZXIsXG4gIGxvZ2luUGFnZTogZnJvbUxvZ2luUGFnZS5yZWR1Y2VyLFxufTtcblxuZXhwb3J0IGNvbnN0IHNlbGVjdEF1dGhTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgQXV0aFN0YXRlPiA9XG4gICAgY3JlYXRlRmVhdHVyZVNlbGVjdG9yPFN0YXRlLCBBdXRoU3RhdGU+KCdhdXRoJyk7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RBdXRoU3RhdHVzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGUsIGZyb21BdXRoLlN0YXRlPiA9XG4gICAgY3JlYXRlU2VsZWN0b3Ioc2VsZWN0QXV0aFN0YXRlLCAoc3RhdGU6IEF1dGhTdGF0ZSkgPT4gc3RhdGUuc3RhdHVzKTtcbmV4cG9ydCBjb25zdCBnZXRJbml0OiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBib29sZWFuPiA9XG4gICAgY3JlYXRlU2VsZWN0b3Ioc2VsZWN0QXV0aFN0YXR1c1N0YXRlLCBmcm9tQXV0aC5nZXRJbml0KTtcbmV4cG9ydCBjb25zdCBnZXRVc2VyOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBVc2VyfG51bGw+ID1cbiAgICBjcmVhdGVTZWxlY3RvcihzZWxlY3RBdXRoU3RhdHVzU3RhdGUsIGZyb21BdXRoLmdldFVzZXIpO1xuZXhwb3J0IGNvbnN0IGdldExvZ2dlZEluOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBib29sZWFuPiA9XG4gICAgY3JlYXRlU2VsZWN0b3IoZ2V0VXNlciwgdXNlciA9PiB1c2VyICE9IG51bGwpO1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0TG9naW5QYWdlU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGUsIGZyb21Mb2dpblBhZ2UuU3RhdGU+ID1cbiAgICBjcmVhdGVTZWxlY3RvcihzZWxlY3RBdXRoU3RhdGUsIChzdGF0ZTogQXV0aFN0YXRlKSA9PiBzdGF0ZS5sb2dpblBhZ2UpO1xuZXhwb3J0IGNvbnN0IGdldExvZ2luUGFnZUVycm9yOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBzdHJpbmd8bnVsbD4gPVxuICAgIGNyZWF0ZVNlbGVjdG9yKHNlbGVjdExvZ2luUGFnZVN0YXRlLCBmcm9tTG9naW5QYWdlLmdldEVycm9yKTtcbmV4cG9ydCBjb25zdCBnZXRMb2dpblBhZ2VQZW5kaW5nOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBib29sZWFuPiA9XG4gICAgY3JlYXRlU2VsZWN0b3Ioc2VsZWN0TG9naW5QYWdlU3RhdGUsIGZyb21Mb2dpblBhZ2UuZ2V0UGVuZGluZyk7XG4iXX0=