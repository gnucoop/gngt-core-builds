/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { Inject, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { TranslateService } from '@ngx-translate/core';
import { of as obsOf, timer, zip } from 'rxjs';
import { catchError, delayWhen, exhaustMap, map, mergeMap, switchMap, tap } from 'rxjs/operators';
import { AuthService } from './auth';
import { Init, InitComplete, InitUser, InitUserComplete, Logout, LogoutConfirmationDismiss, } from './auth-actions';
import { LoginFailure, LoginSuccess, RefreshToken, } from './auth-api-actions';
import { AUTH_OPTIONS } from './auth-options-token';
import { AuthUserInteractionsService } from './auth-user-interactions';
import { JwtHelperService } from './jwt-helper';
export class AuthEffects {
    constructor(_actions$, _authService, _jwtHelperService, _userInteractionsService, _router, _ts, _config) {
        this._actions$ = _actions$;
        this._authService = _authService;
        this._jwtHelperService = _jwtHelperService;
        this._userInteractionsService = _userInteractionsService;
        this._router = _router;
        this._ts = _ts;
        this._config = _config;
        this.initUser$ = createEffect(() => this._actions$.pipe(ofType("[Auth] Init user" /* InitUser */), exhaustMap(() => this._authService.getCurrentUser().pipe(catchError(_ => {
            return obsOf(this._config.meGetter != null ? this._config.meGetter() : null);
        }))), map((u) => {
            const user = u;
            if (this._config.meSetter != null) {
                this._config.meSetter(user);
            }
            return new InitUserComplete({ user });
        })));
        this.initUserComplete$ = createEffect(() => this._actions$.pipe(ofType("[Auth] Init user complete" /* InitUserComplete */), map(() => new InitComplete())));
        this.login$ = createEffect(() => this._actions$.pipe(ofType("[Login Page] Login" /* Login */), map(action => action.payload.credentials), exhaustMap((auth) => this._authService.login(auth).pipe(map((res) => new LoginSuccess(res)), catchError((err) => {
            const errors = [];
            if (err.status === 0 || !err.error.message) {
                errors.push('Connection problem. Please try again');
            }
            else {
                errors.push(err.error.message);
            }
            return zip(...errors.map(e => this._ts.get(e)))
                .pipe(map(error => new LoginFailure({ error })));
        })))));
        this.loginSuccess$ = createEffect(() => this._actions$.pipe(ofType("[Auth/API] Login Success" /* LoginSuccess */), tap((action) => {
            const payload = action.payload;
            const tokenKey = this._config.tokenKey || 'access_token';
            const refreshTokenKey = this._config.refreshTokenKey || 'refresh_token';
            this._jwtHelperService.tokenSetter(payload[tokenKey]);
            this._jwtHelperService.refreshTokenSetter(payload[refreshTokenKey]);
            if (this._config.loggedInUserSetter) {
                this._config.loggedInUserSetter(payload.user_id);
            }
            if (this._config.meSetter != null) {
                this._config.meSetter(payload.user);
            }
            this._router.navigate(['/']);
        }), mergeMap((action) => [this._getRefreshTokenAction(),
            new InitUserComplete({ user: action.payload.user }),
        ])));
        this.loginFailure$ = createEffect(() => this._actions$.pipe(ofType("[Auth/API] Login Failure" /* LoginFailure */), tap((action) => {
            this._userInteractionsService.showLoginError(action.payload.error.join('\n'));
        })), { dispatch: false });
        this.refreshToken$ = createEffect(() => this._actions$.pipe(ofType("[Auth/API] Refresh token" /* RefreshToken */), delayWhen((action) => timer(action.payload.refreshDelay)), exhaustMap((action) => this._authService
            .refreshToken(this._jwtHelperService.refreshTokenGetter() || '')
            .pipe(switchMap((payload) => {
            const res = [];
            const tokenKey = this._config.tokenKey || 'access_token';
            this._jwtHelperService.tokenSetter(payload[tokenKey]);
            if (action.payload.fromInit) {
                res.push(new InitUser());
            }
            res.push(this._getRefreshTokenAction());
            return res;
        }), catchError(err => {
            if (err.status === 0) {
                return obsOf(new InitUser());
            }
            return obsOf(new InitComplete());
        })))));
        this.loginRedirect$ = createEffect(() => this._actions$.pipe(ofType("[Auth/API] Login Redirect" /* LoginRedirect */, "[Auth] Logout" /* Logout */), tap(_authed => {
            this._router.navigate(['/login']);
        })), { dispatch: false });
        this.logoutConfirmation$ = createEffect(() => this._actions$.pipe(ofType("[Auth] Logout Confirmation" /* LogoutConfirmation */), exhaustMap(() => this._userInteractionsService.askLogoutConfirm()), map(result => result ? new Logout() : new LogoutConfirmationDismiss())));
        this.logout$ = createEffect(() => this._actions$.pipe(ofType("[Auth] Logout" /* Logout */), tap(() => {
            this._jwtHelperService.tokenSetter(null);
            this._jwtHelperService.refreshTokenSetter(null);
            if (this._config.loggedInUserSetter != null) {
                this._config.loggedInUserSetter(null);
            }
            if (this._config.meSetter != null) {
                this._config.meSetter(null);
            }
        })), { dispatch: false });
        this.init$ = createEffect(() => this._actions$.pipe(ofType("[Auth] Init" /* Init */), switchMap(() => {
            const res = [];
            const token = this._jwtHelperService.tokenGetter();
            if (token) {
                try {
                    if (!this._jwtHelperService.isTokenExpired(token)) {
                        const decoded = this._jwtHelperService.decodeToken(token);
                        const scopes = this._config.disableScopes ? [] : this._getScopesFromToken(decoded);
                        if (this._config.disableScopes || scopes.indexOf('admin') > -1) {
                            res.push(new InitUser());
                            res.push(this._getRefreshTokenAction());
                        }
                    }
                    else {
                        res.push(new RefreshToken({ refreshDelay: 0, fromInit: true }));
                    }
                }
                catch (e) {
                    res.push(new InitComplete());
                }
            }
            else {
                res.push(new InitComplete());
            }
            return res;
        })));
    }
    ngrxOnInitEffects() {
        return new Init();
    }
    _getRefreshTokenAction(fromInit) {
        const accessToken = this._jwtHelperService.tokenGetter();
        const exp = this._jwtHelperService.getTokenExpirationDate(accessToken) || new Date();
        const refreshDelay = Math.max(0, Math.round((exp.getTime() - new Date().getTime()) * 0.8));
        return new RefreshToken({ refreshDelay, fromInit });
    }
    _getScopesFromToken(token) {
        const scopesPath = this._config.scopesPath || ['scopes'];
        scopesPath.forEach(p => token = token[p]);
        return token;
    }
}
AuthEffects.decorators = [
    { type: Injectable }
];
AuthEffects.ctorParameters = () => [
    { type: Actions },
    { type: AuthService },
    { type: JwtHelperService },
    { type: AuthUserInteractionsService },
    { type: Router },
    { type: TranslateService },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_OPTIONS,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1lZmZlY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvcmUvYXV0aC9hdXRoLWVmZmVjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFHSCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQWEsRUFBRSxJQUFJLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pELE9BQU8sRUFBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ25DLE9BQU8sRUFHTCxJQUFJLEVBQ0osWUFBWSxFQUNaLFFBQVEsRUFDUixnQkFBZ0IsRUFDaEIsTUFBTSxFQUNOLHlCQUF5QixHQUMxQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFHTCxZQUFZLEVBQ1osWUFBWSxFQUNaLFlBQVksR0FDYixNQUFNLG9CQUFvQixDQUFDO0FBRTVCLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUVyRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFPOUMsTUFBTSxPQUFPLFdBQVc7SUFp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R0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE9BQU8sSUFBSSxZQUFZLENBQUMsRUFBQyxZQUFZLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sbUJBQW1CLENBQUMsS0FBVTtRQUNwQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pELFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUF2TEYsVUFBVTs7O1lBakNILE9BQU87WUFLUCxXQUFXO1lBc0JYLGdCQUFnQjtZQUZoQiwyQkFBMkI7WUExQjNCLE1BQU07WUFFTixnQkFBZ0I7NENBc01jLE1BQU0sU0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgR251Y29vcCBBbmd1bGFyIFRvb2xraXQgKGduZ3QpLlxuICpcbiAqIEdudWNvb3AgQW5ndWxhciBUb29sa2l0IChnbmd0KSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogR251Y29vcCBBbmd1bGFyIFRvb2xraXQgKGduZ3QpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBHbnVjb29wIEFuZ3VsYXIgVG9vbGtpdCAoZ25ndCkuICBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0h0dHBFcnJvclJlc3BvbnNlfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1JvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7QWN0aW9ucywgY3JlYXRlRWZmZWN0LCBvZlR5cGUsIE9uSW5pdEVmZmVjdHN9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xuaW1wb3J0IHtUcmFuc2xhdGVTZXJ2aWNlfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2YgYXMgb2JzT2YsIHRpbWVyLCB6aXB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjYXRjaEVycm9yLCBkZWxheVdoZW4sIGV4aGF1c3RNYXAsIG1hcCwgbWVyZ2VNYXAsIHN3aXRjaE1hcCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7QXV0aFNlcnZpY2V9IGZyb20gJy4vYXV0aCc7XG5pbXBvcnQge1xuICBBdXRoQWN0aW9uc1VuaW9uLFxuICBBdXRoQWN0aW9uVHlwZXMsXG4gIEluaXQsXG4gIEluaXRDb21wbGV0ZSxcbiAgSW5pdFVzZXIsXG4gIEluaXRVc2VyQ29tcGxldGUsXG4gIExvZ291dCxcbiAgTG9nb3V0Q29uZmlybWF0aW9uRGlzbWlzcyxcbn0gZnJvbSAnLi9hdXRoLWFjdGlvbnMnO1xuaW1wb3J0IHtcbiAgQXV0aEFwaUFjdGlvbnNVbmlvbixcbiAgQXV0aEFwaUFjdGlvblR5cGVzLFxuICBMb2dpbkZhaWx1cmUsXG4gIExvZ2luU3VjY2VzcyxcbiAgUmVmcmVzaFRva2VuLFxufSBmcm9tICcuL2F1dGgtYXBpLWFjdGlvbnMnO1xuaW1wb3J0IHtBdXRoT3B0aW9uc30gZnJvbSAnLi9hdXRoLW9wdGlvbnMnO1xuaW1wb3J0IHtBVVRIX09QVElPTlN9IGZyb20gJy4vYXV0aC1vcHRpb25zLXRva2VuJztcbmltcG9ydCB7QXV0aFVzZXJJbnRlcmFjdGlvbnNTZXJ2aWNlfSBmcm9tICcuL2F1dGgtdXNlci1pbnRlcmFjdGlvbnMnO1xuaW1wb3J0IHtDcmVkZW50aWFsc30gZnJvbSAnLi9jcmVkZW50aWFscyc7XG5pbXBvcnQge0p3dEhlbHBlclNlcnZpY2V9IGZyb20gJy4vand0LWhlbHBlcic7XG5pbXBvcnQgKiBhcyBMb2dpblBhZ2VBY3Rpb25zIGZyb20gJy4vbG9naW4tcGFnZS1hY3Rpb25zJztcbmltcG9ydCB7VXNlcn0gZnJvbSAnLi91c2VyJztcblxuZXhwb3J0IHR5cGUgQWxsQXV0aEFjdGlvbnMgPSBBdXRoQWN0aW9uc1VuaW9ufEF1dGhBcGlBY3Rpb25zVW5pb247XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdXRoRWZmZWN0cyBpbXBsZW1lbnRzIE9uSW5pdEVmZmVjdHMge1xuICBpbml0VXNlciQ6IE9ic2VydmFibGU8QXV0aEFjdGlvbnNVbmlvbj4gPSBjcmVhdGVFZmZlY3QoXG4gICAgICAoKSA9PiB0aGlzLl9hY3Rpb25zJC5waXBlKFxuICAgICAgICAgIG9mVHlwZTxJbml0VXNlcj4oQXV0aEFjdGlvblR5cGVzLkluaXRVc2VyKSxcbiAgICAgICAgICBleGhhdXN0TWFwKCgpID0+IHRoaXMuX2F1dGhTZXJ2aWNlLmdldEN1cnJlbnRVc2VyKCkucGlwZShjYXRjaEVycm9yKF8gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mKHRoaXMuX2NvbmZpZy5tZUdldHRlciAhPSBudWxsID8gdGhpcy5fY29uZmlnLm1lR2V0dGVyKCkgOiBudWxsKTtcbiAgICAgICAgICB9KSkpLFxuICAgICAgICAgIG1hcCgodSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IHUgYXMgVXNlciB8IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLm1lU2V0dGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY29uZmlnLm1lU2V0dGVyKHVzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbml0VXNlckNvbXBsZXRlKHt1c2VyfSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgKSk7XG5cbiAgaW5pdFVzZXJDb21wbGV0ZSQ6IE9ic2VydmFibGU8QXV0aEFjdGlvbnNVbmlvbj4gPSBjcmVhdGVFZmZlY3QoXG4gICAgICAoKSA9PiB0aGlzLl9hY3Rpb25zJC5waXBlKFxuICAgICAgICAgIG9mVHlwZTxJbml0VXNlckNvbXBsZXRlPihBdXRoQWN0aW9uVHlwZXMuSW5pdFVzZXJDb21wbGV0ZSksXG4gICAgICAgICAgbWFwKCgpID0+IG5ldyBJbml0Q29tcGxldGUoKSkpKTtcblxuICBsb2dpbiQ6IE9ic2VydmFibGU8QXV0aEFwaUFjdGlvbnNVbmlvbj4gPSBjcmVhdGVFZmZlY3QoXG4gICAgICAoKSA9PlxuICAgICAgICAgIHRoaXMuX2FjdGlvbnMkLnBpcGUoXG4gICAgICAgICAgICAgIG9mVHlwZTxMb2dpblBhZ2VBY3Rpb25zLkxvZ2luPihMb2dpblBhZ2VBY3Rpb25zLkxvZ2luUGFnZUFjdGlvblR5cGVzLkxvZ2luKSxcbiAgICAgICAgICAgICAgbWFwKGFjdGlvbiA9PiBhY3Rpb24ucGF5bG9hZC5jcmVkZW50aWFscyksXG4gICAgICAgICAgICAgIGV4aGF1c3RNYXAoXG4gICAgICAgICAgICAgICAgICAoYXV0aDogQ3JlZGVudGlhbHMpID0+IHRoaXMuX2F1dGhTZXJ2aWNlLmxvZ2luKGF1dGgpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgbWFwKChyZXMpID0+IG5ldyBMb2dpblN1Y2Nlc3MocmVzKSksIGNhdGNoRXJyb3IoKGVycjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzID09PSAwIHx8ICFlcnIuZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCgnQ29ubmVjdGlvbiBwcm9ibGVtLiBQbGVhc2UgdHJ5IGFnYWluJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gemlwKC4uLmVycm9ycy5tYXAoZSA9PiA8T2JzZXJ2YWJsZTxzdHJpbmc+PnRoaXMuX3RzLmdldChlKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcChlcnJvciA9PiBuZXcgTG9naW5GYWlsdXJlKHtlcnJvcn0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIH0pKSksXG4gICAgICAgICAgICAgICkgYXMgT2JzZXJ2YWJsZTxBdXRoQXBpQWN0aW9uc1VuaW9uPik7XG5cbiAgbG9naW5TdWNjZXNzJDogT2JzZXJ2YWJsZTxBbGxBdXRoQWN0aW9ucz4gPSBjcmVhdGVFZmZlY3QoXG4gICAgICAoKSA9PiB0aGlzLl9hY3Rpb25zJC5waXBlKFxuICAgICAgICAgICAgICAgIG9mVHlwZTxMb2dpblN1Y2Nlc3M+KEF1dGhBcGlBY3Rpb25UeXBlcy5Mb2dpblN1Y2Nlc3MpLFxuICAgICAgICAgICAgICAgIHRhcCgoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gPGFueT5hY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuS2V5ID0gdGhpcy5fY29uZmlnLnRva2VuS2V5IHx8ICdhY2Nlc3NfdG9rZW4nO1xuICAgICAgICAgICAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuS2V5ID0gdGhpcy5fY29uZmlnLnJlZnJlc2hUb2tlbktleSB8fCAncmVmcmVzaF90b2tlbic7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9qd3RIZWxwZXJTZXJ2aWNlLnRva2VuU2V0dGVyKHBheWxvYWRbdG9rZW5LZXldKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2p3dEhlbHBlclNlcnZpY2UucmVmcmVzaFRva2VuU2V0dGVyKHBheWxvYWRbcmVmcmVzaFRva2VuS2V5XSk7XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLmxvZ2dlZEluVXNlclNldHRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25maWcubG9nZ2VkSW5Vc2VyU2V0dGVyKHBheWxvYWQudXNlcl9pZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLm1lU2V0dGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnLm1lU2V0dGVyKHBheWxvYWQudXNlcik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGUoWycvJ10pO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG1lcmdlTWFwKFxuICAgICAgICAgICAgICAgICAgICAoYWN0aW9uKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuX2dldFJlZnJlc2hUb2tlbkFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJbml0VXNlckNvbXBsZXRlKHt1c2VyOiBhY3Rpb24ucGF5bG9hZC51c2VyfSksXG4gIF0pLFxuICAgICAgICAgICAgICAgICkgYXMgT2JzZXJ2YWJsZTxBbGxBdXRoQWN0aW9ucz4pO1xuXG4gIGxvZ2luRmFpbHVyZSQ6IE9ic2VydmFibGU8QXV0aEFwaUFjdGlvbnNVbmlvbj4gPSBjcmVhdGVFZmZlY3QoXG4gICAgICAoKSA9PiB0aGlzLl9hY3Rpb25zJC5waXBlKFxuICAgICAgICAgIG9mVHlwZTxMb2dpbkZhaWx1cmU+KEF1dGhBcGlBY3Rpb25UeXBlcy5Mb2dpbkZhaWx1cmUpLFxuICAgICAgICAgIHRhcCgoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl91c2VySW50ZXJhY3Rpb25zU2VydmljZS5zaG93TG9naW5FcnJvcihhY3Rpb24ucGF5bG9hZC5lcnJvci5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgKSxcbiAgICAgIHtkaXNwYXRjaDogZmFsc2V9KTtcblxuICByZWZyZXNoVG9rZW4kOiBPYnNlcnZhYmxlPEFsbEF1dGhBY3Rpb25zPiA9IGNyZWF0ZUVmZmVjdChcbiAgICAgICgpID0+IHRoaXMuX2FjdGlvbnMkLnBpcGUoXG4gICAgICAgICAgICAgICAgb2ZUeXBlPFJlZnJlc2hUb2tlbj4oQXV0aEFwaUFjdGlvblR5cGVzLlJlZnJlc2hUb2tlbiksXG4gICAgICAgICAgICAgICAgZGVsYXlXaGVuKChhY3Rpb246IFJlZnJlc2hUb2tlbikgPT4gdGltZXIoYWN0aW9uLnBheWxvYWQucmVmcmVzaERlbGF5KSksXG4gICAgICAgICAgICAgICAgZXhoYXVzdE1hcChcbiAgICAgICAgICAgICAgICAgICAgKGFjdGlvbjogUmVmcmVzaFRva2VuKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXV0aFNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVmcmVzaFRva2VuKHRoaXMuX2p3dEhlbHBlclNlcnZpY2UucmVmcmVzaFRva2VuR2V0dGVyKCkgfHwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgocGF5bG9hZDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzOiAoQXV0aEFwaUFjdGlvbnNVbmlvbnxBdXRoQWN0aW9uc1VuaW9uKVtdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5LZXkgPSB0aGlzLl9jb25maWcudG9rZW5LZXkgfHwgJ2FjY2Vzc190b2tlbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fand0SGVscGVyU2VydmljZS50b2tlblNldHRlcihwYXlsb2FkW3Rva2VuS2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLmZyb21Jbml0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChuZXcgSW5pdFVzZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX2dldFJlZnJlc2hUb2tlbkFjdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzT2YobmV3IEluaXRVc2VyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzT2YobmV3IEluaXRDb21wbGV0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICkgYXMgT2JzZXJ2YWJsZTxBbGxBdXRoQWN0aW9ucz4pO1xuXG4gIGxvZ2luUmVkaXJlY3QkOiBPYnNlcnZhYmxlPEFsbEF1dGhBY3Rpb25zPiA9IGNyZWF0ZUVmZmVjdChcbiAgICAgICgpID0+IHRoaXMuX2FjdGlvbnMkLnBpcGUoXG4gICAgICAgICAgb2ZUeXBlKEF1dGhBcGlBY3Rpb25UeXBlcy5Mb2dpblJlZGlyZWN0LCBBdXRoQWN0aW9uVHlwZXMuTG9nb3V0KSwgdGFwKF9hdXRoZWQgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10pO1xuICAgICAgICAgIH0pKSxcbiAgICAgIHtkaXNwYXRjaDogZmFsc2V9KTtcblxuICBsb2dvdXRDb25maXJtYXRpb24kOiBPYnNlcnZhYmxlPEF1dGhBY3Rpb25zVW5pb24+ID0gY3JlYXRlRWZmZWN0KFxuICAgICAgKCkgPT4gdGhpcy5fYWN0aW9ucyQucGlwZShcbiAgICAgICAgICBvZlR5cGUoQXV0aEFjdGlvblR5cGVzLkxvZ291dENvbmZpcm1hdGlvbiksXG4gICAgICAgICAgZXhoYXVzdE1hcCgoKSA9PiB0aGlzLl91c2VySW50ZXJhY3Rpb25zU2VydmljZS5hc2tMb2dvdXRDb25maXJtKCkpLFxuICAgICAgICAgIG1hcChyZXN1bHQgPT4gcmVzdWx0ID8gbmV3IExvZ291dCgpIDogbmV3IExvZ291dENvbmZpcm1hdGlvbkRpc21pc3MoKSkpKTtcblxuICBsb2dvdXQkOiBPYnNlcnZhYmxlPEF1dGhBY3Rpb25zVW5pb24+ID0gY3JlYXRlRWZmZWN0KFxuICAgICAgKCkgPT4gdGhpcy5fYWN0aW9ucyQucGlwZShcbiAgICAgICAgICBvZlR5cGUoQXV0aEFjdGlvblR5cGVzLkxvZ291dCksXG4gICAgICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2p3dEhlbHBlclNlcnZpY2UudG9rZW5TZXR0ZXIobnVsbCk7XG4gICAgICAgICAgICB0aGlzLl9qd3RIZWxwZXJTZXJ2aWNlLnJlZnJlc2hUb2tlblNldHRlcihudWxsKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25maWcubG9nZ2VkSW5Vc2VyU2V0dGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY29uZmlnLmxvZ2dlZEluVXNlclNldHRlcihudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25maWcubWVTZXR0ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aGlzLl9jb25maWcubWVTZXR0ZXIobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgKSxcbiAgICAgIHtkaXNwYXRjaDogZmFsc2V9KTtcblxuICBpbml0JDogT2JzZXJ2YWJsZTxBbGxBdXRoQWN0aW9ucz4gPSBjcmVhdGVFZmZlY3QoXG4gICAgICAoKSA9PiB0aGlzLl9hY3Rpb25zJC5waXBlKFxuICAgICAgICAgICAgICAgIG9mVHlwZShBdXRoQWN0aW9uVHlwZXMuSW5pdCksXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJlczogKEF1dGhBcGlBY3Rpb25zVW5pb258QXV0aEFjdGlvbnNVbmlvbilbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLl9qd3RIZWxwZXJTZXJ2aWNlLnRva2VuR2V0dGVyKCk7XG4gICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2p3dEhlbHBlclNlcnZpY2UuaXNUb2tlbkV4cGlyZWQodG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy5fand0SGVscGVyU2VydmljZS5kZWNvZGVUb2tlbih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY29wZXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5kaXNhYmxlU2NvcGVzID8gW10gOiB0aGlzLl9nZXRTY29wZXNGcm9tVG9rZW4oZGVjb2RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLmRpc2FibGVTY29wZXMgfHwgc2NvcGVzLmluZGV4T2YoJ2FkbWluJykgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChuZXcgSW5pdFVzZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX2dldFJlZnJlc2hUb2tlbkFjdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2gobmV3IFJlZnJlc2hUb2tlbih7cmVmcmVzaERlbGF5OiAwLCBmcm9tSW5pdDogdHJ1ZX0pKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChuZXcgSW5pdENvbXBsZXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChuZXcgSW5pdENvbXBsZXRlKCkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICApIGFzIE9ic2VydmFibGU8QWxsQXV0aEFjdGlvbnM+KTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgX2FjdGlvbnMkOiBBY3Rpb25zLCBwcml2YXRlIF9hdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgICBwcml2YXRlIF9qd3RIZWxwZXJTZXJ2aWNlOiBKd3RIZWxwZXJTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSBfdXNlckludGVyYWN0aW9uc1NlcnZpY2U6IEF1dGhVc2VySW50ZXJhY3Rpb25zU2VydmljZSwgcHJpdmF0ZSBfcm91dGVyOiBSb3V0ZXIsXG4gICAgICBwcml2YXRlIF90czogVHJhbnNsYXRlU2VydmljZSwgQEluamVjdChBVVRIX09QVElPTlMpIHByaXZhdGUgX2NvbmZpZzogQXV0aE9wdGlvbnMpIHt9XG5cbiAgbmdyeE9uSW5pdEVmZmVjdHMoKTogSW5pdCB7XG4gICAgcmV0dXJuIG5ldyBJbml0KCk7XG4gIH1cblxuICBwcml2YXRlIF9nZXRSZWZyZXNoVG9rZW5BY3Rpb24oZnJvbUluaXQ/OiBib29sZWFuKTogUmVmcmVzaFRva2VuIHtcbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHRoaXMuX2p3dEhlbHBlclNlcnZpY2UudG9rZW5HZXR0ZXIoKTtcbiAgICBjb25zdCBleHAgPSB0aGlzLl9qd3RIZWxwZXJTZXJ2aWNlLmdldFRva2VuRXhwaXJhdGlvbkRhdGUoYWNjZXNzVG9rZW4pIHx8IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgcmVmcmVzaERlbGF5ID0gTWF0aC5tYXgoMCwgTWF0aC5yb3VuZCgoZXhwLmdldFRpbWUoKSAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSAqIDAuOCkpO1xuICAgIHJldHVybiBuZXcgUmVmcmVzaFRva2VuKHtyZWZyZXNoRGVsYXksIGZyb21Jbml0fSk7XG4gIH1cblxuICBwcml2YXRlIF9nZXRTY29wZXNGcm9tVG9rZW4odG9rZW46IGFueSk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBzY29wZXNQYXRoID0gdGhpcy5fY29uZmlnLnNjb3Blc1BhdGggfHwgWydzY29wZXMnXTtcbiAgICBzY29wZXNQYXRoLmZvckVhY2gocCA9PiB0b2tlbiA9IHRva2VuW3BdKTtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbn1cbiJdfQ==