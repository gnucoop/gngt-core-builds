import { Inject, Injectable } from '@angular/core';
import * as URLParse from 'url-parse';
import { JwtHelperService } from './jwt-helper';
import { JWT_OPTIONS } from './jwt-options-token';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-options-token";
import * as i2 from "./jwt-helper";
export class JwtInterceptor {
    constructor(config, jwtHelper) {
        this.jwtHelper = jwtHelper;
        this.tokenGetter = config.tokenGetter;
        this.headerName = config.headerName || 'Authorization';
        this.authScheme = config.authScheme || config.authScheme === '' ? config.authScheme : 'Bearer ';
        this.whitelistedDomains = config.whitelistedDomains || [];
        this.blacklistedRoutes = config.blacklistedRoutes || [];
        this.throwNoTokenError = config.throwNoTokenError || false;
        this.skipWhenExpired = config.skipWhenExpired || false;
    }
    isWhitelistedDomain(request) {
        const requestUrl = new URLParse(request.url);
        return (requestUrl.host === null || this.whitelistedDomains.findIndex(domain => {
            if (typeof domain === 'string') {
                return domain === requestUrl.host;
            }
            return domain instanceof RegExp ? domain.test(requestUrl.host) : false;
        }) > -1);
    }
    isBlacklistedRoute(request) {
        const url = request.url;
        return (this.blacklistedRoutes.findIndex(route => {
            if (typeof route === 'string') {
                return route === url;
            }
            return route instanceof RegExp ? route.test(url) : false;
        }) > -1);
    }
    handleInterception(token, request, next) {
        let tokenIsExpired = false;
        if (!token && this.throwNoTokenError) {
            throw new Error('Could not get token from tokenGetter function.');
        }
        if (this.skipWhenExpired) {
            tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;
        }
        if (token && tokenIsExpired && this.skipWhenExpired) {
            request = request.clone();
        }
        else if (token && this.isWhitelistedDomain(request) && !this.isBlacklistedRoute(request)) {
            request = request.clone({ setHeaders: { [this.headerName]: `${this.authScheme}${token}` } });
        }
        return next.handle(request);
    }
    intercept(request, next) {
        const token = this.tokenGetter ? this.tokenGetter() : null;
        return this.handleInterception(token, request, next);
    }
}
JwtInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function JwtInterceptor_Factory() { return new JwtInterceptor(i0.ɵɵinject(i1.JWT_OPTIONS), i0.ɵɵinject(i2.JwtHelperService)); }, token: JwtInterceptor, providedIn: "root" });
JwtInterceptor.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
JwtInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [JWT_OPTIONS,] }] },
    { type: JwtHelperService }
];
//# sourceMappingURL=data:application/json;base64,